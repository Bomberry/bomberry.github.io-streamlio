//  Color Mixins
//  Used to hold mixins for colors.


// Background Gradient
@mixin bg-gradient($first-color, $last-color)
  background: -webkit-gradient(linear, left bottom, #{map-get($streamlio-colors, $first-color)}, #{map-get($streamlio-colors, $last-color)})
  background: -webkit-linear-gradient(left bottom, #{map-get($streamlio-colors, $first-color)}, #{map-get($streamlio-colors, $last-color)})
  background: -moz-linear-gradient(left bottom, #{map-get($streamlio-colors, $first-color)}, #{map-get($streamlio-colors, $last-color)})
  background: -ms-linear-gradient(left bottom, #{map-get($streamlio-colors, $first-color)}, #{map-get($streamlio-colors, $last-color)})
  background: -o-linear-gradient(left bottom, #{map-get($streamlio-colors, $first-color)}, #{map-get($streamlio-colors, $last-color)})
  background: linear-gradient(left bottom, #{map-get($streamlio-colors, $first-color)}, #{map-get($streamlio-colors, $last-color)})
  filter: progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{map-get($streamlio-colors, $first-color)}', end-colourStr='#{map-get($streamlio-colors, $last-color)}', gradientType='1') /* IE6-9 */


//@mixin bg-gradient-1($base-color, $secondary-color)
  background-color: rgba($base-color,1)
  background: @include filter-gradient($base-color, $secondary-color, horizontal)
  background: @include background-image(linear-gradient(left bottom, rgba($base-color,1) 0%, rgba($secondary-color,1) 100%))

//@mixin bg-gradient-2($base-color, $secondary-color, $opacity)
  background: -moz-linear-gradient(left bottom, rgba($base-color, $opacity) 0%, rgba($secondary-color, $opacity) 100%)
  background: -webkit-linear-gradient(left bottom, rgba($base-color, $opacity) 0%, rgba($secondary-color, $opacity) 100%)
  background: linear-gradient(to right top, rgba($base-color, $opacity) 0%, rgba($secondary-color, $opacity) 100%)
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{ie-hex-str(rgba($base-color, $opacity))}', endColorstr='#{ie-hex-str(rgba($secondary-color, $opacity))}',GradientType=0 ) /* IE6-9 */

//@mixin bg-gradient-3($base-color, $secondary-color)
  background-color: $base-color
  background-image: -webkit-gradient(linear, left bottom, right top, from($base-color), to($secondary-color))
  background-image: -webkit-linear-gradient(125deg, $base-color, $secondary-color)
  background-image: -moz-linear-gradient(125deg, $base-color, $secondary-color)
  background-image: -ms-linear-gradient(125deg, $base-color, $secondary-color)
  background-image: -o-linear-gradient(125deg, $base-color, $secondary-color)
  background-image: linear-gradient(125deg, $base-color, $secondary-color)
  filter: progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$base-color}', end-colourStr='#{$secondary-color}', gradientType='1') /* IE6-9 */


//@mixins for setting colors
@mixin set-text-with-color ($streamlio-color)
  $text-objects: (h1, h2, h3, h4, h5, h6, p, a, 'a:hover', 'a:visited', 'a:active')
  @each $value in $text-objects
    #{$value}
      color: (get-color(#{$streamlio-color}))

@mixin set-text-with-colors ($streamlio-color-base, $streamlio-color-accent)
  $base-color-objects: (p)
  $accent-color-objects: (h1, h2, h3, h4, h5, h6, a, 'a:hover', 'a:visited', 'a:active')
  @each $value in $base-color-objects
    #{$value}
      color: (get-color(#{$streamlio-color-base}))
  @each $value in $accent-color-objects
    #{$value}
      color: (get-color(#{$streamlio-color-accent}))


@mixin set-button-color ($streamlio-color)
  color: (get-color($streamlio-color))
  border-color: (get-color($streamlio-color))
  background-color: transparentize($color-white,0.16)
  &:hover
    color: white
    border-color: white
    background-color: transparentize((get-color($streamlio-color)),0.16)

//@mixin colorize-button($base-color, $accent-color)  color: $color-accent-default
  border-color: $color-accent-default
  background-color: transparentize($color-white,0.16)
  &:hover
    color: white
    border-color: white
    background-color: transparentize($color-accent-default,0.16)

@mixin generate-button-classes-for-streamlio-colors
  @each $key, $value in $streamlio-colors
    .button-#{$key}
      @include set-button-color($key)

//@each $key, $value in $streamlio-colors
  %color-#{$key}
    color: #{$value}
  %bg-color-#{$key}
    background-color: #{$value}
